diff --git a/vendor/webkit/webkit/CMakeLists.txt b/vendor/webkit/webkit/CMakeLists.txt
index 0926cd2c05..4ff2c6a432 100644
--- a/vendor/webkit/webkit/CMakeLists.txt
+++ b/vendor/webkit/webkit/CMakeLists.txt
@@ -20,6 +20,22 @@ endif ()
 set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/Source/cmake")
 include(WebKitCommon)
 
+# -----------------------------------------------------------------------------
+# Emscripten support
+#------------------------------------------------------------------------------
+
+if(EMSCRIPTEN)
+    set(CMAKE_C_FLAGS_RELEASE "-DNDEBUG -O2 -fwasm-exceptions")
+    set(CMAKE_C_FLAGS_MINSIZEREL "-DNDEBUG -Oz -fwasm-exceptions")
+    set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g -fwasm-exceptions")
+    set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O2 -fwasm-exceptions")
+    set(CMAKE_CXX_FLAGS_MINSIZEREL "-DNDEBUG -Oz -fwasm-exceptions")
+    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -fwasm-exceptions")
+
+    set(CMAKE_EXE_LINKER_FLAGS "-s WASM=1 -s WASM_BIGINT=1 -s STANDALONE_WASM=1 -fwasm-exceptions -s STACK_SIZE=1048576 -s INITIAL_MEMORY=256MB")
+    set(CMAKE_SHARED_LINKER_FLAGS "-s WASM=1 -s WASM_BIGINT=1 -s STANDALONE_WASM=1 -fwasm-exceptions -s STACK_SIZE=1048576 -s INITIAL_MEMORY=256MB")
+endif()
+
 # -----------------------------------------------------------------------------
 # Enable API unit tests and create a target for the test runner
 # -----------------------------------------------------------------------------
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/API/JSBase.h b/vendor/webkit/webkit/Source/JavaScriptCore/API/JSBase.h
index dbe11e4d14..d7d481fd66 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/API/JSBase.h
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/API/JSBase.h
@@ -81,6 +81,8 @@ typedef struct OpaqueJSValue* JSObjectRef;
 #undef JS_EXPORT
 #if defined(JS_NO_EXPORT)
 #define JS_EXPORT
+#elif defined(__EMSCRIPTEN__)
+#define JS_EXPORT __attribute__((used))
 #elif defined(WIN32) || defined(_WIN32) || defined(__CC_ARM) || defined(__ARMCC__) || (__has_declspec_attribute(dllimport) && __has_declspec_attribute(dllexport))
 #if defined(BUILDING_JavaScriptCore) || defined(STATICALLY_LINKED_WITH_JavaScriptCore)
 #define JS_EXPORT __declspec(dllexport)
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/CMakeLists.txt b/vendor/webkit/webkit/Source/JavaScriptCore/CMakeLists.txt
index dcd4c26b1c..ecb678190c 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/CMakeLists.txt
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/CMakeLists.txt
@@ -435,6 +435,11 @@ set(LLIntOffsetsExtractor_FRAMEWORKS ${JavaScriptCore_FRAMEWORKS})
 set(LLIntOffsetsExtractor_DEPENDENCIES JavaScriptCore_CopyHeaders JSCBuiltins)
 WEBKIT_EXECUTABLE(LLIntOffsetsExtractor)
 
+if(EMSCRIPTEN)
+    set_target_properties(LLIntSettingsExtractor PROPERTIES SUFFIX ".wasm")
+    set_target_properties(LLIntOffsetsExtractor PROPERTIES SUFFIX ".wasm")
+endif()
+
 # The build system will execute asm.rb every time LLIntOffsetsExtractor's mtime is newer than
 # LLIntAssembly.h's mtime. The problem we have here is: asm.rb has some built-in optimization
 # that generates a checksum of the LLIntOffsetsExtractor binary, if the checksum of the new
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_offset_extractor.rb b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_offset_extractor.rb
index 227a43bd3d..ce20fd25d9 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_offset_extractor.rb
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_offset_extractor.rb
@@ -70,10 +70,7 @@ rescue MissingMagicValuesException
 end
 
 def emitMagicNumber
-    OFFSET_MAGIC_NUMBERS.each {
-        | number |
-        $output.puts "unsigned(#{number}),"
-    }
+    $output.puts "#{OFFSET_MAGIC_NUMBER}ull,"
 end
 
 configurationHash = Digest::SHA1.hexdigest(configurationList.join(' '))
@@ -126,10 +123,7 @@ File.open(tempFlnm, "w") {
                     outp.puts "constexpr int64_t constValue#{index} = static_cast<int64_t>(#{const.value});"
                 }
                 outp.puts "static const int64_t offsetExtractorTable[] = {"
-                OFFSET_HEADER_MAGIC_NUMBERS.each {
-                    | number |
-                    outp.puts "unsigned(#{number}),"
-                }
+                outp.puts "#{OFFSET_HEADER_MAGIC_NUMBER}ull,"
 
                 emitMagicNumber
                 outp.puts "#{configIndex},"
@@ -148,6 +142,8 @@ File.open(tempFlnm, "w") {
                     emitMagicNumber
                     outp.puts "constValue#{index},"
                 }
+
+                outp.puts "#{OFFSET_FOOT_NUMBER}ull,"
                 outp.puts "};"
             }
         }
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_settings_extractor.rb b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_settings_extractor.rb
index a7c203cd16..1186a5fc03 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_settings_extractor.rb
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/generate_settings_extractor.rb
@@ -88,16 +88,13 @@ File.open(tempFlnm, "w") {
     outp.puts inputHash
 
     settingsCombinations = computeSettingsCombinations(prunedAST)
-    length = settingsCombinations.size * (1 + OFFSET_HEADER_MAGIC_NUMBERS.size)
 
-    outp.puts "static const int64_t settingsExtractorTable[#{length}] = {"
+    outp.puts "static const int64_t settingsExtractorTable[] = {"
     emitCodeInAllConfigurations(prunedAST) {
         | settings, ast, backend, index |
-        OFFSET_HEADER_MAGIC_NUMBERS.each {
-            | number |
-            $output.puts "unsigned(#{number}),"
-        }
+        outp.puts "#{OFFSET_HEADER_MAGIC_NUMBER}ull,"
         outp.puts "#{index},"
+        outp.puts "#{OFFSET_FOOT_NUMBER}ull,"
     }
     outp.puts "};"
 }
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/offsets.rb b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/offsets.rb
index 25d4d045b2..d69d8f9733 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/offsets.rb
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/offlineasm/offsets.rb
@@ -24,8 +24,9 @@
 require "config"
 require "ast"
 
-OFFSET_HEADER_MAGIC_NUMBERS = [ 0x2e43fd66, 0x4379bfba ]
-OFFSET_MAGIC_NUMBERS = [ 0x5c577ac7, 0x0ff5e755 ]
+OFFSET_HEADER_MAGIC_NUMBER = 0x2e43fd664379bfba
+OFFSET_MAGIC_NUMBER = 0x5c577ac70ff5e755
+OFFSET_FOOT_NUMBER = 0x4ab2f6d5d345fd0
 
 #
 # MissingMagicValuesException
@@ -84,20 +85,15 @@ def readInt(endianness, bytes)
     number
 end
 
-def prepareMagic(endianness, numbers)
+def prepareMagic(endianness, number)
     magicBytes = []
-    numbers.each {
-        | number |
-        currentBytes = []
-        8.times {
-            currentBytes << (number & 0xff)
-            number >>= 8
-        }
-        if endianness == :big
-            currentBytes.reverse!
-        end
-        magicBytes += currentBytes
+    8.times {
+        magicBytes << (number & 0xff)
+        number >>= 8
     }
+    if endianness == :big
+        magicBytes.reverse!
+    end
     magicBytes
 end
 
@@ -152,8 +148,8 @@ def offsetsAndConfigurationIndex(file)
 
     [:little, :big].each {
         | endianness |
-        headerMagicBytes = prepareMagic(endianness, OFFSET_HEADER_MAGIC_NUMBERS)
-        magicBytes = prepareMagic(endianness, OFFSET_MAGIC_NUMBERS)
+        headerMagicBytes = prepareMagic(endianness, OFFSET_HEADER_MAGIC_NUMBER)
+        magicBytes = prepareMagic(endianness, OFFSET_MAGIC_NUMBER)
 
         bigArray = sliceByteArrays(fileBytes, headerMagicBytes)
         unless bigArray.size <= 1
@@ -216,7 +212,7 @@ def configurationIndices(file)
 
     [:little, :big].each {
         | endianness |
-        headerMagicBytes = prepareMagic(endianness, OFFSET_HEADER_MAGIC_NUMBERS)
+        headerMagicBytes = prepareMagic(endianness, OFFSET_HEADER_MAGIC_NUMBER)
 
         bigArray = sliceByteArrays(fileBytes, headerMagicBytes)
         unless bigArray.size <= 1
diff --git a/vendor/webkit/webkit/Source/JavaScriptCore/runtime/Options.cpp b/vendor/webkit/webkit/Source/JavaScriptCore/runtime/Options.cpp
index f22bd79f3f..0f35c8ba52 100644
--- a/vendor/webkit/webkit/Source/JavaScriptCore/runtime/Options.cpp
+++ b/vendor/webkit/webkit/Source/JavaScriptCore/runtime/Options.cpp
@@ -218,7 +218,7 @@ std::optional<OptionsStorage::Unsigned> parse(const char* string)
     return std::nullopt;
 }
 
-#if CPU(ADDRESS64) || OS(DARWIN)
+#if CPU(ADDRESS64) || OS(DARWIN) || OS(EMSCRIPTEN)
 template<>
 std::optional<OptionsStorage::Size> parse(const char* string)
 {
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/Compiler.h b/vendor/webkit/webkit/Source/WTF/wtf/Compiler.h
index 53339d6bb4..072bac8077 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/Compiler.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/Compiler.h
@@ -320,7 +320,7 @@
 
 /* MUST_TAIL_CALL */
 
-#if !defined(MUST_TAIL_CALL) && defined(__cplusplus) && defined(__has_cpp_attribute)
+#if !defined(MUST_TAIL_CALL) && defined(__cplusplus) && defined(__has_cpp_attribute) && !defined(__EMSCRIPTEN__)
 #if __has_cpp_attribute(clang::musttail)
 #define MUST_TAIL_CALL [[clang::musttail]]
 #endif
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/Condition.h b/vendor/webkit/webkit/Source/WTF/wtf/Condition.h
index 49fc3dffe2..78ca49b860 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/Condition.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/Condition.h
@@ -29,6 +29,7 @@
 #include <wtf/Noncopyable.h>
 #include <wtf/ParkingLot.h>
 #include <wtf/TimeWithDynamicClockType.h>
+#include <wtf/Threading.h>
 
 namespace WTF {
 
@@ -184,6 +185,10 @@ private:
     template<typename LockType>
     bool waitUntilUnchecked(LockType& lock, const TimeWithDynamicClockType& timeout) WTF_IGNORES_THREAD_SAFETY_ANALYSIS
     {
+#if OS(EMSCRIPTEN)
+        Thread::suspendIfNeeded();
+#endif
+
         bool result;
         if (timeout < timeout.nowWithSameClock()) {
             lock.unlock();
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/PlatformHave.h b/vendor/webkit/webkit/Source/WTF/wtf/PlatformHave.h
index 4b62e3fb93..4f0a47f338 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/PlatformHave.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/PlatformHave.h
@@ -384,7 +384,7 @@
 #define HAVE_URL_FORMATTING 1
 #endif
 
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(EMSCRIPTEN)
 #define HAVE_STACK_BOUNDS_FOR_NEW_THREAD 1
 #endif
 
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/PlatformOS.h b/vendor/webkit/webkit/Source/WTF/wtf/PlatformOS.h
index a1cc024123..8d0f983881 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/PlatformOS.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/PlatformOS.h
@@ -121,6 +121,11 @@
 #define WTF_OS_WINDOWS 1
 #endif
 
+/* OS(EMSCRIPTEN) - Emscripten/WASM */
+#if defined(__EMSCRIPTEN__)
+#define WTF_OS_EMSCRIPTEN 1
+#endif
+
 
 /* OS(UNIX) - Any Unix-like system */
 #if    OS(AIX)              \
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.cpp b/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.cpp
index 2255df0ecd..e1b8b7cfff 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.cpp
+++ b/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.cpp
@@ -29,7 +29,7 @@
 
 #include <stdlib.h>
 
-#if !OS(DARWIN) && !OS(FUCHSIA) && OS(UNIX)
+#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(EMSCRIPTEN) && OS(UNIX)
 #include <errno.h>
 #include <fcntl.h>
 #include <unistd.h>
@@ -49,9 +49,13 @@
 #include <zircon/syscalls.h>
 #endif
 
+#if OS(EMSCRIPTEN)
+#include <wasi/api.h>
+#endif
+
 namespace WTF {
 
-#if !OS(DARWIN) && !OS(FUCHSIA) && OS(UNIX)
+#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(EMSCRIPTEN) && OS(UNIX)
 NEVER_INLINE NO_RETURN_DUE_TO_CRASH static void crashUnableToOpenURandom()
 {
     CRASH();
@@ -63,7 +67,7 @@ NEVER_INLINE NO_RETURN_DUE_TO_CRASH static void crashUnableToReadFromURandom()
 }
 #endif
 
-#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(WINDOWS)
+#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(WINDOWS) && !OS(EMSCRIPTEN)
 RandomDevice::RandomDevice()
 {
     int ret = 0;
@@ -76,7 +80,7 @@ RandomDevice::RandomDevice()
 }
 #endif
 
-#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(WINDOWS)
+#if !OS(DARWIN) && !OS(FUCHSIA) && !OS(WINDOWS) && !OS(EMSCRIPTEN)
 RandomDevice::~RandomDevice()
 {
     close(m_fd);
@@ -91,6 +95,8 @@ void RandomDevice::cryptographicallyRandomValues(std::span<uint8_t> buffer)
     RELEASE_ASSERT(!CCRandomGenerateBytes(buffer.data(), buffer.size()));
 #elif OS(FUCHSIA)
     zx_cprng_draw(buffer.data(), buffer.size());
+#elif OS(EMSCRIPTEN)
+    RELEASE_ASSERT(!__wasi_random_get(buffer.data(), buffer.size()));
 #elif OS(UNIX)
     ssize_t amountRead = 0;
     while (static_cast<size_t>(amountRead) < buffer.size()) {
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.h b/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.h
index 2c3f0e0635..0b1f0c0908 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/RandomDevice.h
@@ -35,7 +35,7 @@ class RandomDevice {
     WTF_MAKE_NONCOPYABLE(RandomDevice);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-#if OS(DARWIN) || OS(FUCHSIA) || OS(WINDOWS)
+#if OS(DARWIN) || OS(FUCHSIA) || OS(WINDOWS) || OS(EMSCRIPTEN)
     RandomDevice() = default;
 #else
     RandomDevice();
@@ -48,7 +48,7 @@ public:
     void cryptographicallyRandomValues(std::span<uint8_t> buffer);
 
 private:
-#if OS(DARWIN) || OS(FUCHSIA) || OS(WINDOWS)
+#if OS(DARWIN) || OS(FUCHSIA) || OS(WINDOWS) || OS(EMSCRIPTEN)
 #elif OS(UNIX)
     int m_fd { -1 };
 #else
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/RawHex.h b/vendor/webkit/webkit/Source/WTF/wtf/RawHex.h
index 1e83222845..b1f4ad4274 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/RawHex.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/RawHex.h
@@ -48,7 +48,7 @@ public:
         : RawHex(static_cast<uintptr_t>(value))
     { }
 
-#if CPU(ADDRESS64) || OS(DARWIN)
+#if CPU(ADDRESS64) || OS(DARWIN) || OS(EMSCRIPTEN)
     // These causes build errors for CPU(ADDRESS32) on some ports because int32_t
     // is already handled by intptr_t, and uint32_t is handled by uintptr_t.
     explicit RawHex(int32_t value)
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/Seconds.cpp b/vendor/webkit/webkit/Source/WTF/wtf/Seconds.cpp
index f9f2f1bc4d..9b9112fdd1 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/Seconds.cpp
+++ b/vendor/webkit/webkit/Source/WTF/wtf/Seconds.cpp
@@ -27,6 +27,7 @@
 #include <wtf/Seconds.h>
 
 #include <wtf/ApproximateTime.h>
+#include <wtf/Threading.h>
 #include <wtf/Condition.h>
 #include <wtf/Lock.h>
 #include <wtf/MonotonicTime.h>
@@ -90,6 +91,10 @@ TextStream& operator<<(TextStream& ts, Seconds seconds)
 
 void sleep(Seconds value)
 {
+#if OS(EMSCRIPTEN)
+    Thread::suspendIfNeeded();
+#endif
+
     // It's very challenging to find portable ways of sleeping for less than a second. On UNIX, you want to
     // use usleep() but it's hard to #include it in a portable way (you'd think it's in unistd.h, but then
     // you'd be wrong on some OSX SDKs). Also, usleep() won't save you on Windows. Hence, bottoming out in
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/StackBounds.cpp b/vendor/webkit/webkit/Source/WTF/wtf/StackBounds.cpp
index ab392806c0..46ae113acf 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/StackBounds.cpp
+++ b/vendor/webkit/webkit/Source/WTF/wtf/StackBounds.cpp
@@ -46,6 +46,10 @@
 #include <sys/storage.h>
 #endif
 
+#if OS(EMSCRIPTEN)
+#include <emscripten/stack.h>
+#endif
+
 #endif
 
 namespace WTF {
@@ -77,6 +81,16 @@ StackBounds StackBounds::currentThreadStackBoundsInternal()
     return newThreadStackBounds(pthread_self());
 }
 
+#elif OS(EMSCRIPTEN)
+
+StackBounds StackBounds::currentThreadStackBoundsInternal()
+{
+    void *origin = (void *)emscripten_stack_get_base();
+    void *bound = (void *)emscripten_stack_get_end();
+
+    return StackBounds { origin, bound };
+}
+
 #elif OS(UNIX)
 
 #if OS(OPENBSD)
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/StackPointer.cpp b/vendor/webkit/webkit/Source/WTF/wtf/StackPointer.cpp
index a8cba4d4c6..229c576043 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/StackPointer.cpp
+++ b/vendor/webkit/webkit/Source/WTF/wtf/StackPointer.cpp
@@ -28,6 +28,10 @@
 
 #include "InlineASM.h"
 
+#if OS(EMSCRIPTEN)
+#include <emscripten/stack.h>
+#endif
+
 namespace WTF {
 
 #if USE(ASM_CURRENT_STACK_POINTER)
@@ -157,7 +161,9 @@ constexpr size_t sizeOfFrameHeader = 2 * sizeof(void*);
 SUPPRESS_ASAN NEVER_INLINE
 void* currentStackPointer()
 {
-#if COMPILER(GCC_COMPATIBLE)
+#if OS(EMSCRIPTEN)
+    return (void *)emscripten_stack_get_current();
+#elif COMPILER(GCC_COMPATIBLE)
     return reinterpret_cast<uint8_t*>(__builtin_frame_address(0)) + sizeOfFrameHeader;
 #else
     // Make sure that sp is the only local variable declared in this function.
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/Threading.h b/vendor/webkit/webkit/Source/WTF/wtf/Threading.h
index 5ec2b9c9d4..deb093fb57 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/Threading.h
+++ b/vendor/webkit/webkit/Source/WTF/wtf/Threading.h
@@ -195,7 +195,7 @@ public:
     WTF_EXPORT_PRIVATE void resume(const ThreadSuspendLocker&);
     WTF_EXPORT_PRIVATE size_t getRegisters(const ThreadSuspendLocker&, PlatformRegisters&);
 
-#if USE(PTHREADS)
+#if USE(PTHREADS) && !OS(EMSCRIPTEN)
 #if OS(LINUX)
     WTF_EXPORT_PRIVATE static ThreadIdentifier currentID();
     ThreadIdentifier id() const { return m_id; }
@@ -226,6 +226,10 @@ public:
     
     WTF_EXPORT_PRIVATE static void yield();
 
+#if OS(EMSCRIPTEN)
+    WTF_EXPORT_PRIVATE static void suspendIfNeeded();
+#endif
+
     WTF_EXPORT_PRIVATE static bool exchangeIsCompilationThread(bool newValue);
     WTF_EXPORT_PRIVATE static void registerGCThread(GCThreadType);
     WTF_EXPORT_PRIVATE static bool mayBeGCThread();
@@ -313,7 +317,7 @@ protected:
     void establishPlatformSpecificHandle(PlatformThreadHandle, ThreadIdentifier);
 #endif
 
-#if USE(PTHREADS) && !OS(DARWIN)
+#if USE(PTHREADS) && !OS(DARWIN) && !OS(EMSCRIPTEN)
     static void signalHandlerSuspendResume(int, siginfo_t*, void* ucontext);
 #endif
 
@@ -389,6 +393,12 @@ protected:
     ThreadIdentifier m_id { 0 };
 #elif OS(DARWIN)
     mach_port_t m_platformThread { MACH_PORT_NULL };
+#elif OS(EMSCRIPTEN)
+    PlatformRegisters* m_platformRegisters { nullptr };
+    Mutex m_suspendMutex;
+    ThreadCondition m_suspendCondition;
+    unsigned m_suspendCount { 0 };
+    bool m_suspendState { false };
 #elif USE(PTHREADS)
 #if OS(LINUX)
     ThreadIdentifier m_id { 0 };
diff --git a/vendor/webkit/webkit/Source/WTF/wtf/posix/ThreadingPOSIX.cpp b/vendor/webkit/webkit/Source/WTF/wtf/posix/ThreadingPOSIX.cpp
index 60e095a613..88f8abf782 100644
--- a/vendor/webkit/webkit/Source/WTF/wtf/posix/ThreadingPOSIX.cpp
+++ b/vendor/webkit/webkit/Source/WTF/wtf/posix/ThreadingPOSIX.cpp
@@ -85,7 +85,8 @@ namespace WTF {
 
 Thread::~Thread() = default;
 
-#if !OS(DARWIN)
+#if !OS(DARWIN) && !OS(EMSCRIPTEN)
+
 class Semaphore final {
     WTF_MAKE_NONCOPYABLE(Semaphore);
     WTF_MAKE_FAST_ALLOCATED;
@@ -176,7 +177,7 @@ void Thread::signalHandlerSuspendResume(int, siginfo_t*, void* ucontext)
     globalSemaphoreForSuspendResume->post();
 }
 
-#endif // !OS(DARWIN)
+#endif // !OS(DARWIN) && !OS(EMSCRIPTEN)
 
 void Thread::initializePlatformThreading()
 {
@@ -190,7 +191,7 @@ void Thread::initializePlatformThreading()
     }
     g_wtfConfig.isThreadSuspendResumeSignalConfigured = true;
 
-#if !OS(DARWIN)
+#if !OS(DARWIN) && !OS(EMSCRIPTEN)
     globalSemaphoreForSuspendResume.construct(0);
 
     // Signal handlers are process global configuration.
@@ -231,7 +232,7 @@ ThreadIdentifier Thread::currentID()
 
 void Thread::initializeCurrentThreadEvenIfNonWTFCreated()
 {
-#if !OS(DARWIN)
+#if !OS(DARWIN) && !OS(EMSCRIPTEN)
     RELEASE_ASSERT(g_wtfConfig.isThreadSuspendResumeSignalConfigured);
     sigset_t mask;
     sigemptyset(&mask);
@@ -441,6 +442,8 @@ Thread& Thread::initializeCurrentTLS()
     return initializeTLS(WTFMove(thread));
 }
 
+#if !OS(EMSCRIPTEN)
+
 bool Thread::signal(int signalNumber)
 {
     Locker locker { m_mutex };
@@ -450,6 +453,8 @@ bool Thread::signal(int signalNumber)
     return !errNo; // A 0 errNo means success.
 }
 
+#endif // !OS(EMSCRIPTEN)
+
 auto Thread::suspend(const ThreadSuspendLocker&) -> Expected<void, PlatformSuspendError>
 {
     RELEASE_ASSERT_WITH_MESSAGE(this != &Thread::current(), "We do not support suspending the current thread itself.");
@@ -458,6 +463,14 @@ auto Thread::suspend(const ThreadSuspendLocker&) -> Expected<void, PlatformSuspe
     if (result != KERN_SUCCESS)
         return makeUnexpected(result);
     return { };
+#elif OS(EMSCRIPTEN)
+    m_suspendMutex.lock();
+    m_suspendCount++;
+    while (!m_suspendState)
+        m_suspendCondition.wait(m_suspendMutex);
+    m_suspendMutex.unlock();
+
+    return { };
 #else
     if (!m_suspendCount) {
         targetThread.store(this);
@@ -484,6 +497,12 @@ void Thread::resume(const ThreadSuspendLocker&)
 {
 #if OS(DARWIN)
     thread_resume(m_platformThread);
+#elif OS(EMSCRIPTEN)
+    m_suspendMutex.lock();
+    if (m_suspendCount == 1)
+        m_suspendCondition.broadcast();
+    --m_suspendCount;
+    m_suspendMutex.unlock();
 #else
     if (m_suspendCount == 1) {
         // When allowing sigThreadSuspendResume interrupt in the signal handler by sigsuspend and SigThreadSuspendResume is actually issued,
@@ -704,6 +723,23 @@ void Thread::yield()
 #endif
 }
 
+#if OS(EMSCRIPTEN)
+
+void Thread::suspendIfNeeded()
+{
+    Thread &self = Thread::current();
+
+    self.m_suspendMutex.lock();
+    while (self.m_suspendCount) {
+        self.m_suspendState = true;
+        self.m_suspendCondition.wait(self.m_suspendMutex);
+    }
+    self.m_suspendState = false;
+    self.m_suspendMutex.unlock();
+}
+
+#endif
+
 } // namespace WTF
 
 #endif // USE(PTHREADS)
