diff --git a/vendor/webkit/icu/icu4c/source/acinclude.m4 b/vendor/webkit/icu/icu4c/source/acinclude.m4
index 507f41f521..a2dbc35120 100644
--- a/vendor/webkit/icu/icu4c/source/acinclude.m4
+++ b/vendor/webkit/icu/icu4c/source/acinclude.m4
@@ -15,6 +15,9 @@ AC_DEFUN([ICU_CHECK_MH_FRAG], [
 		[icu_cv_host_frag],
 		[
 case "${host}" in
+wasm32-*-*)
+	icu_cv_host_frag=mh-wasm32
+	;;
 *-*-solaris*)
 	if test "$GCC" = yes; then	
 		icu_cv_host_frag=mh-solaris-gcc
diff --git a/vendor/webkit/icu/icu4c/source/config/mh-wasm32 b/vendor/webkit/icu/icu4c/source/config/mh-wasm32
new file mode 100644
index 000000000..71a216256
--- /dev/null
+++ b/vendor/webkit/icu/icu4c/source/config/mh-wasm32
@@ -0,0 +1,95 @@
+## -*-makefile-*-
+## Copyright (C) 2016 and later: Unicode, Inc. and others.
+## License & terms of use: http://www.unicode.org/copyright.html
+## Linux-specific setup
+## Copyright (c) 1999-2013, International Business Machines Corporation and
+## others. All Rights Reserved.
+
+## Commands to generate dependency files
+GEN_DEPS.c=  $(CC) -E -MM $(DEFS) $(CPPFLAGS)
+GEN_DEPS.cc= $(CXX) -E -MM $(DEFS) $(CPPFLAGS) $(CXXFLAGS)
+
+## Flags for position independent code
+SHAREDLIBCFLAGS =
+SHAREDLIBCXXFLAGS =
+SHAREDLIBCPPFLAGS =
+
+## Additional flags when building libraries and with threads
+THREADSCPPFLAGS = -D_REENTRANT
+LIBCPPFLAGS =
+
+## Compiler switch to embed a runtime search path
+LD_RPATH= -Wl,-zorigin,-rpath,'$$'ORIGIN
+LD_RPATH_PRE = -Wl,-rpath,
+
+## These are the library specific LDFLAGS
+LDFLAGSICUDT=-nodefaultlibs -nostdlib
+
+## Compiler switch to embed a library name
+# The initial tab in the next line is to prevent icu-config from reading it.
+LD_SONAME =
+#SH# # We can't depend on MIDDLE_SO_TARGET being set.
+#SH# LD_SONAME=
+
+## Shared library options
+LD_SOOPTIONS= #-Wl,-Bsymbolic
+
+## Shared object suffix
+SO = so
+## Non-shared intermediate object suffix
+STATIC_O = ao
+
+## Compilation rules
+%.$(STATIC_O): $(srcdir)/%.c
+	$(call SILENT_COMPILE,$(strip $(COMPILE.c) $(STATICCPPFLAGS) $(STATICCFLAGS)) -o $@ $<)
+%.o: $(srcdir)/%.c
+	$(call SILENT_COMPILE,$(strip $(COMPILE.c) $(DYNAMICCPPFLAGS) $(DYNAMICCFLAGS)) -o $@ $<)
+
+%.$(STATIC_O): $(srcdir)/%.cpp
+	$(call SILENT_COMPILE,$(strip $(COMPILE.cc) $(STATICCPPFLAGS) $(STATICCXXFLAGS)) -o $@ $<)
+%.o: $(srcdir)/%.cpp
+	$(call SILENT_COMPILE,$(strip $(COMPILE.cc) $(DYNAMICCPPFLAGS) $(DYNAMICCXXFLAGS)) -o $@ $<)
+
+
+## Dependency rules
+%.d: $(srcdir)/%.c
+	$(call ICU_MSG,(deps)) $<
+	@$(SHELL) -ec '$(GEN_DEPS.c) $< \
+	     | sed '\''s%\($*\)\.o[ :]*%\1.o $@ : %g'\'' > $@; \
+	     [ -s $@ ] || rm -f $@'
+
+%.d: $(srcdir)/%.cpp
+	$(call ICU_MSG,(deps)) $<
+	@$(SHELL) -ec '$(GEN_DEPS.cc) $< \
+	     | sed '\''s%\($*\)\.o[ :]*%\1.o $@ : %g'\'' > $@; \
+	     [ -s $@ ] || rm -f $@'
+
+## Versioned libraries rules
+
+%.$(SO).$(SO_TARGET_VERSION_MAJOR): %.$(SO).$(SO_TARGET_VERSION)
+	$(RM) $@ && ln -s ${<F} $@
+%.$(SO): %.$(SO).$(SO_TARGET_VERSION_MAJOR)
+	$(RM) $@ && ln -s ${*F}.$(SO).$(SO_TARGET_VERSION) $@
+
+##  Bind internal references
+
+# LDflags that pkgdata will use
+BIR_LDFLAGS=
+
+# Dependencies [i.e. map files] for the final library
+BIR_DEPS=
+
+## Remove shared library 's'
+STATIC_PREFIX_WHEN_USED =
+STATIC_PREFIX =
+
+# Invoke binaries through node
+INVOKE = node
+PKGDATA_INVOKE = node
+
+# Emscripten link flags
+LINK.cc += -s WASM=1 -s WASM_BIGINT=1 -s STACK_SIZE=1048576 -s INITIAL_MEMORY=256MB \
+           -s EXIT_RUNTIME=1 -s FORCE_FILESYSTEM=1 -s NODERAWFS=1
+LIBICUTOOLUTIL += --js-library $(top_srcdir)/tools/toolutil/nodejs-system.js
+
+## End WASM32-specific setup
diff --git a/vendor/webkit/icu/icu4c/source/configure b/vendor/webkit/icu/icu4c/source/configure
index 5611241c24..326b7d1989 100755
--- a/vendor/webkit/icu/icu4c/source/configure
+++ b/vendor/webkit/icu/icu4c/source/configure
@@ -5241,6 +5241,9 @@ if ${icu_cv_host_frag+:} false; then :
 else
 
 case "${host}" in
+wasm32-*-*)
+	icu_cv_host_frag=mh-wasm32
+	;;
 *-*-solaris*)
 	if test "$GCC" = yes; then
 		icu_cv_host_frag=mh-solaris-gcc
diff --git a/vendor/webkit/icu/icu4c/source/runConfigureICU b/vendor/webkit/icu/icu4c/source/runConfigureICU
index 77df3a0686..ef8804ccd8 100755
--- a/vendor/webkit/icu/icu4c/source/runConfigureICU
+++ b/vendor/webkit/icu/icu4c/source/runConfigureICU
@@ -59,6 +59,7 @@ The following names can be supplied as the argument for platform:
     Solaris/GCC         Use the GNU gcc/g++ compilers on Solaris
     SolarisX86          Use the Sun cc/CC compilers on Solaris x86
     TRU64V5.1/CXX       Use the Compaq cxx compiler on Tru64 (OSF)
+    wasm32              Use the emscripten to build for wasm32
     zOS                 Use the IBM cxx compiler on z/OS (os/390)
     zOSV1R2             Use the IBM cxx compiler for z/OS 1.2
 EOE
@@ -346,6 +347,15 @@ case $platform in
         CC=qcc; export CC
         CXX=QCC; export CXX
         ;;
+    wasm32)
+        THE_OS="wasm32"
+        THE_COMP="wasm32 emscripten"
+        CC=emcc; export CC
+        CXX=em++; export CXX
+        CPPFLAGS="-Os -DUSE_SINGLE_CCODE_FILE -DU_HAVE_MMAP=0"; export CPPFLAGS
+        CONFIGURE_WRAPPER=emconfigure; export CONFIGURE_WRAPPER
+        OPTS="$OPTS --build=wasm32 --target=wasm32"; export OPTS
+    ;;
     zOS)
         THE_OS="z/OS (OS/390)"
         THE_COMP="z/OS C/C++"
@@ -432,7 +445,7 @@ export LDFLAGS
 echo "export CPP=$CPP CC=$CC CXX=$CXX CPPFLAGS=$CPPFLAGS CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS LDFLAGS=$LDFLAGS MAKE=$MAKE"
 echo "Running ./configure $OPTS $@ for $THE_OS using $THE_COMP compiler"
 echo
-if $configure $OPTS $@
+if $CONFIGURE_WRAPPER $configure $OPTS $@
 then
 	echo
 	echo If the result of the above commands looks okay to you, go to the directory
diff --git a/vendor/webkit/icu/icu4c/source/tools/toolutil/nodejs-system.js b/vendor/webkit/icu/icu4c/source/tools/toolutil/nodejs-system.js
new file mode 100644
index 0000000000..24f37889dc
--- /dev/null
+++ b/vendor/webkit/icu/icu4c/source/tools/toolutil/nodejs-system.js
@@ -0,0 +1,20 @@
+
+mergeInto(LibraryManager.library, {
+  system__deps: ['__setErrNo'],
+  system: function(commandAddr) {
+    const command = UTF8ToString(commandAddr)
+    // int system(const char *command);
+    // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
+    // Can't call external programs.
+    try {
+        const stdout = require('child_process').execSync(command);
+        console.log(`system:fine:${stdout}`);
+        return 0;
+    } catch (e) {
+        console.log(`system:failed:${command}:${e}`);
+        ___setErrNo({{{ cDefine('EAGAIN') }}});
+        return -1;
+    }
+
+  },
+});
